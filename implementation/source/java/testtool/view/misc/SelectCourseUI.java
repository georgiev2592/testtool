// Patrick is the owner of this file, slack him before you make a change (in case of svn conflicts)
// if he doesn't respond in 15 minutes after a DM or mention then feel free to change it.
package testtool.view.misc;

import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JDialog;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

import testtool.model.administration.Course;
import java.util.Collection;
import testtool.model.administration.CourseOffering;
import testtool.database.TestToolDB;


/****
 *
 * A JPanel that provides the user with a list of courses to select.
 * These courses include courses that the user is a member of or that they are a owner of.
 *
 * @author Patrick Riordan (psriorda@calpoly.edu)
 */
public class SelectCourseUI extends javax.swing.JPanel {

    public CourseOffering selectedCourse;
    private Collection<CourseOffering> courses;
    private ActionListener onCancel, onSelect;

    /**
     * This constructor needs a non null db which is used to get the active user as
     * well as the class information. onCancel is triggered when the user pressed cancel on the dialog.
     * onSelect is called after the user selects an appropriate class. Both of these can be null.
     */
    public SelectCourseUI(TestToolDB db, ActionListener onCancel, ActionListener onSelect) {
        // If the user closes the dialog than neither onCancel nor onSelect will be called (unless someone fixes this bug)
        initComponents();

        courses = db.courseBank.selectCourseOfferingsOfUser(db.activeUser);
        this.selectedCourse = null;
        CancelButton.setEnabled(true);
        OkButton.setEnabled(false);
        this.onCancel = onCancel; // Can be null
        this.onSelect = onSelect; // Can be null
        //ButtonView.setEnabled(false);
        //ButtonEdit.setEnabled(false);
        //ButtonDelete.setEnabled(false);
        DefaultTableModel model = (DefaultTableModel) CourseTable.getModel();

        for (CourseOffering c : courses) {
            model.addRow(new Object[]{c.course.toString() + " " + c.term});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane7 = new javax.swing.JScrollPane();
        CourseTable = new javax.swing.JTable();
        CancelButton = new javax.swing.JButton();
        CancelButton.setEnabled(false);
        OkButton = new javax.swing.JButton();
        OkButton.setEnabled(false);

        CourseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CourseTable.setRowHeight(20);
        CourseTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        CourseTable.setSurrendersFocusOnKeystroke(true);
        CourseTable.getTableHeader().setReorderingAllowed(false);
        CourseTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CourseTableMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(CourseTable);
        if (CourseTable.getColumnModel().getColumnCount() > 0) {
            CourseTable.getColumnModel().getColumn(0).setPreferredWidth(500);
            CourseTable.getColumnModel().getColumn(0).setCellRenderer(new MultiLineTableCellRenderer());
        }

        CancelButton.setText("Cancel");
        CancelButton.setMaximumSize(new java.awt.Dimension(92, 28));
        CancelButton.setMinimumSize(new java.awt.Dimension(92, 28));
        CancelButton.setPreferredSize(new java.awt.Dimension(92, 28));
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        OkButton.setText("Select");
        OkButton.setMaximumSize(new java.awt.Dimension(92, 28));
        OkButton.setMinimumSize(new java.awt.Dimension(92, 28));
        OkButton.setPreferredSize(new java.awt.Dimension(92, 28));
        OkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OkButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(151, 151, 151)
                        .addComponent(OkButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(151, 151, 151)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OkButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * when cancel button is pressed, close the window
     * @param evt
     */
    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        //DisabledJButton test = new DisabledJButton();// TODO add your handling code here:
        //quit somehow

        Close();
        if (onCancel != null) {
            onCancel.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
        }
    }//GEN-LAST:event_CancelButtonActionPerformed

    /**
     * when 'ok' button is pressed, the selected course is fetched.
     * @param evt
     */
    private void OkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OkButtonActionPerformed
        // TODO add your handling code here:
        int selected = CourseTable.getSelectedRow();
        selectedCourse = courses.toArray(new CourseOffering[0])[selected];

        //quit somehow
        Close();
        if (onSelect != null) {
            onSelect.actionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
        }
    }//GEN-LAST:event_OkButtonActionPerformed

    /**
     * activate the 'ok' button if a course is selected, otherwise it remains
     * turned off
     * @param evt
     */
    private void CourseTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CourseTableMouseClicked
        //System.out.println("HIT!: " + Arrays.toString(QuestionTable.getSelectedRows()));
      OkButton.setEnabled(true);
    }//GEN-LAST:event_CourseTableMouseClicked

  /**
   * close the current dialog
   */
  private void Close() {
      Window window = SwingUtilities.getWindowAncestor(this);
      JDialog dialog = (JDialog) window;
      dialog.dispose();
    }
    //

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelButton;
    private javax.swing.JTable CourseTable;
    private javax.swing.JButton OkButton;
    private javax.swing.JScrollPane jScrollPane7;
    // End of variables declaration//GEN-END:variables
}
