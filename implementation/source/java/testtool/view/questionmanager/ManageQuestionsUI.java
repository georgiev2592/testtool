package testtool.view.questionmanager;


import javax.swing.JOptionPane;
import testtool.view.misc.MultiLineTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import testtool.view.TestToolScreen;
import testtool.model.questionmanager.QuestionManager;
import testtool.model.questionmanager.Question;
import java.util.Collection;

/****
 *
 * Class ManageQuestionsUI provides the user with a way to modify and remove questions
 * from the database.
 *
 * @author Ian Smith-Grove (ismithgr@calpoly.edu)
 */
public class ManageQuestionsUI extends TestToolScreen {

    /**
     * 
     */
    private QuestionManager model;
    
   /**
    * Creates new form ManageTestsUI. 
    * 
    * @param testmanager TestManager object is passed to the function.
    */
   public ManageQuestionsUI(QuestionManager questionmanager) {
      super("TestTool / Manage Questions");
      initComponents();
      
      //QuestionTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
      this.model = questionmanager;
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SearchField = new javax.swing.JTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        QuestionTable = new javax.swing.JTable();
        ButtonView = new javax.swing.JButton();
        ButtonView.setEnabled(false);
        ButtonEdit = new javax.swing.JButton();
        ButtonEdit.setEnabled(false);
        ButtonDelete = new javax.swing.JButton();
        ButtonDelete.setEnabled(false);
        SearchButton = new javax.swing.JButton();
        AdvancedSearchButton = new javax.swing.JButton();

        SearchField.setMinimumSize(new java.awt.Dimension(10, 28));
        SearchField.setPreferredSize(new java.awt.Dimension(10, 28));
        SearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchFieldActionPerformed(evt);
            }
        });

        QuestionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Prompt", "Type", "Course", "Author", "Difficulty", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        QuestionTable.setRowHeight(20);
        QuestionTable.setSurrendersFocusOnKeystroke(true);
        QuestionTable.getTableHeader().setReorderingAllowed(false);
        QuestionTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                QuestionTableMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(QuestionTable);
        if (QuestionTable.getColumnModel().getColumnCount() > 0) {
            QuestionTable.getColumnModel().getColumn(0).setPreferredWidth(500);
            QuestionTable.getColumnModel().getColumn(0).setCellRenderer(new MultiLineTableCellRenderer());
        }

        ButtonView.setText("View");
        ButtonView.setMaximumSize(new java.awt.Dimension(92, 28));
        ButtonView.setMinimumSize(new java.awt.Dimension(92, 28));
        ButtonView.setPreferredSize(new java.awt.Dimension(92, 28));
        ButtonView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonViewActionPerformed(evt);
            }
        });

        ButtonEdit.setText("Edit");
        ButtonEdit.setMaximumSize(new java.awt.Dimension(92, 28));
        ButtonEdit.setMinimumSize(new java.awt.Dimension(92, 28));
        ButtonEdit.setPreferredSize(new java.awt.Dimension(92, 28));
        ButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEditActionPerformed(evt);
            }
        });

        ButtonDelete.setText("Delete");
        ButtonDelete.setMaximumSize(new java.awt.Dimension(92, 28));
        ButtonDelete.setMinimumSize(new java.awt.Dimension(92, 28));
        ButtonDelete.setPreferredSize(new java.awt.Dimension(92, 28));
        ButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDeleteActionPerformed(evt);
            }
        });

        SearchButton.setText("Search");
        SearchButton.setMaximumSize(new java.awt.Dimension(86, 27));
        SearchButton.setMinimumSize(new java.awt.Dimension(86, 27));
        SearchButton.setPreferredSize(new java.awt.Dimension(86, 27));
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        AdvancedSearchButton.setText("...");
        AdvancedSearchButton.setMaximumSize(new java.awt.Dimension(50, 27));
        AdvancedSearchButton.setMinimumSize(new java.awt.Dimension(50, 27));
        AdvancedSearchButton.setPreferredSize(new java.awt.Dimension(50, 27));
        AdvancedSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdvancedSearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(299, 299, 299)
                .addComponent(ButtonView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(ButtonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(ButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SearchField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AdvancedSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 921, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AdvancedSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Will call the method to search for a question.
     * @param evt
     */
    private void SearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchFieldActionPerformed
        SearchButtonActionPerformed(evt);
    }//GEN-LAST:event_SearchFieldActionPerformed
    /**
     * When search button is pressed, search for specified question.
     * @param evt
     */
    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        DefaultTableModel table = (DefaultTableModel) QuestionTable.getModel();

        while (table.getRowCount() > 0)
            table.removeRow(0);

        String[] keywords = SearchField.getText().split("[\\s,]+");
        model.searchQuestion(keywords);
        updateJTableFromModel();

        /*
        if (questionList.isEmpty()) {
            JOptionPane.showMessageDialog(null,
                "Sorry! No results were found using term: "
                        + SearchField.getText().toUpperCase()
                        + ". Try using different keywords",
                "Attention",
                JOptionPane.WARNING_MESSAGE);
        }
        else {
            for (Question question: questionList) {
                table.addRow(question.toArray());
            }
        }
        */
    }//GEN-LAST:event_SearchButtonActionPerformed

    public void updateJTableFromModel() {
        DefaultTableModel table = (DefaultTableModel) QuestionTable.getModel();
        while (table.getRowCount() > 0) {
            table.removeRow(0);
        }
        for (Question question: model.getQuestionList()) {
            table.addRow(question.toArray());
        }
    }
    
    /**
     * More advanced search that allows the user to create better searches with
     * more parameters to use as search elements
     * @param evt
     */
    private void AdvancedSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdvancedSearchButtonActionPerformed
        displayNewDialog(new QuestionSearchUI(model, this));
    }//GEN-LAST:event_AdvancedSearchButtonActionPerformed

    private void ButtonViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonViewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ButtonViewActionPerformed
   
    private void ButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ButtonEditActionPerformed

    /**
     * When delete button is pressed, delete the selected question and 
     * change the panel to the new UI.
     * @param evt
     */     
    private void ButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDeleteActionPerformed
        DefaultTableModel table = (DefaultTableModel) QuestionTable.getModel();
        int index = QuestionTable.getSelectedRow();
        int dialogResult = JOptionPane.showConfirmDialog (null, 
            "Are you sure you want to permanently delete the selected questions?",
            "Warning", 
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE);

        if(dialogResult == JOptionPane.YES_OPTION) {
           table.removeRow(index);
           System.out.println((Question)model.getQuestionList().toArray()[index]);
           model.deleteQuestion((Question)model.getQuestionList().toArray()[index]);      
        }
    }//GEN-LAST:event_ButtonDeleteActionPerformed


    /**
     * Method that sets button privileges of the selected table entry
     * depending on which entry is clicked.
     * @param evt 
     */    
    private void QuestionTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_QuestionTableMouseClicked
        //System.out.println("HIT!: " + Arrays.toString(QuestionTable.getSelectedRows()));
        if (QuestionTable.getSelectedRowCount() == 1) {
            ButtonView.setEnabled(true);
            ButtonEdit.setEnabled(true);
            ButtonDelete.setEnabled(true);
        } else if (QuestionTable.getSelectedRowCount() > 1) {
            ButtonView.setEnabled(false);
            ButtonEdit.setEnabled(false);
            ButtonDelete.setEnabled(true);
        } else {
            ButtonView.setEnabled(false);
            ButtonEdit.setEnabled(false);
            ButtonDelete.setEnabled(false);
        }
    }//GEN-LAST:event_QuestionTableMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AdvancedSearchButton;
    private javax.swing.JButton ButtonDelete;
    private javax.swing.JButton ButtonEdit;
    private javax.swing.JButton ButtonView;
    private javax.swing.JTable QuestionTable;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextField SearchField;
    private javax.swing.JScrollPane jScrollPane7;
    // End of variables declaration//GEN-END:variables
}
